/* remove rvmrc from the gem */

@connection = TicketEvolution::Connection.new({:token => '', secret => ''})

/* @event = @connection.events.show(1) */
                            /* find should alias show */

/* @event.venue.attributes should output @event.venue.instance_eval { @table } */

/* @connection.events.list */
                   /* all should alias list */

/* @connection.events.update(params) */
                   /* update_attributes(params) and */
                   /* save on the model should call this on the endpoint */

handle 301 and 302 responses gracefully

Build up the remaining classes, namespaced classes and routes. A namespaced class should be created if
 it's possible to scope an endpoint's results by another endpoint
 e.x. /events can take venue_id as a parameter
      TicketEvolution::Venues::Events should be created and a route should be added to the api to make
      that conversion automatically

/* scripts and css should load local in api docs */

XML output should be added to the api docs app to allow for auto documentation building

Examples using the gem should be built into the docs

figure out how to handle performances functionality and test if performers get created in the
  performances array - http://developer.ticketevolution.com/endpoints/events#show

build parent functionality - http://developer.ticketevolution.com/endpoints/categories#show

Transaction url checkin. Can this be called without account?
  http://developer.ticketevolution.com/endpoints/transactions#show

Build Order#accept method which calls Orders#accept_order
Build Order#reject method which calls Orders#reject_order
Build Order#complete method which calls Orders#complete_order
